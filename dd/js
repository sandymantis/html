// script.js
interact('.draggable')
  .draggable({
    inertia: true,
    autoScroll: true,
    onmove: dragMoveListener,
    onend(event) {
      const type = event.target.dataset.type;
      const dropzone = document.querySelector('.canvas');

      // Create a copy of the dragged element to place in the canvas
      const clone = event.target.cloneNode(true);
      clone.classList.add('dropped');
      clone.style.position = 'absolute';
      clone.style.left = `${event.clientX - dropzone.getBoundingClientRect().left}px`;
      clone.style.top = `${event.clientY - dropzone.getBoundingClientRect().top}px`;

      dropzone.appendChild(clone);
    },
  });

// Handle drag movements
function dragMoveListener(event) {
  const target = event.target;
  const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
  const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

  target.style.transform = `translate(${x}px, ${y}px)`;

  target.setAttribute('data-x', x);
  target.setAttribute('data-y', y);
}

// Enable drag and drop in the canvas area
interact('.canvas .dropped').draggable({
  onmove: dragMoveListener,
});
