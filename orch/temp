// Reload the scripts manually by appending them to the DOM
function reloadSSRAppScripts() {
    const scripts = document.querySelectorAll('script');
    scripts.forEach(script => {
        const newScript = document.createElement('script');
        if (script.src) {
            newScript.src = script.src + '?timestamp=' + new Date().getTime(); // Force re-download
            document.body.appendChild(newScript);
        } else {
            newScript.textContent = script.textContent; // Handle inline scripts
            document.body.appendChild(newScript);
        }
    });
}


// Function to reload the script elements after saving their data
function reloadScripts() {
    const scriptData = [];

    // Collect all script data before removing the scripts
    document.querySelectorAll('script').forEach(oldScript => {
        if (oldScript.src) {
            scriptData.push({ src: oldScript.src }); // Save the script src
        } else {
            scriptData.push({ inline: oldScript.textContent }); // Save inline script content
        }
    });

    // Remove old scripts from the document
    document.querySelectorAll('script').forEach(oldScript => oldScript.remove());

    // Recreate and append new script tags using the saved data
    scriptData.forEach(data => {
        const newScript = document.createElement('script');
        if (data.src) {
            // If it's an external script, add the cache-busting parameter
            newScript.src = data.src + '?timestamp=' + new Date().getTime();
        } else if (data.inline) {
            // If it's an inline script, copy its content
            newScript.textContent = data.inline;
        }
        document.body.appendChild(newScript); // Append the new script to the DOM
    });
}

// After document.write(), clean up and reload the scripts
document.write(...);  // Your SSR content
document.close();
reloadScripts();       // Reload scripts with saved data


// Inside the web component
shadowRoot.addEventListener('click', (event) => {
  const link = event.target.closest('a');
  if (link) {
    event.preventDefault();
    // Dispatch the event with composed: true to allow it to propagate outside the shadow DOM
    link.dispatchEvent(
      new CustomEvent('link-click', {
        bubbles: true,
        composed: true, // This allows the event to propagate outside shadow DOM
      })
    );
  }
});

