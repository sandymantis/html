npm init -y


npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/preset-react @babel/register


npm install node-fetch


npm install --save-dev webpack webpack-cli babel-loader


npm install --save-dev nodemon



{
  "presets": [
    [
      "@babel/preset-env",
      {
        "modules": false
      }
    ],
    "@babel/preset-react"
  ]
}



// server.js
import express from 'express';
import path from 'path';
import React from 'react';
import { renderToString } from 'react-dom/server';
import fetch from 'node-fetch';
import App from './src/App.js';

const app = express();

// Serve static files from the 'public' directory
app.use(express.static('public'));

app.get('/', async (req, res) => {
  // Fetch a random joke from the Official Joke API on the server-side
  const response = await fetch('https://official-joke-api.appspot.com/random_joke');
  const joke = await response.json();

  // Render the React app to a string
  const appString = renderToString(<App joke={joke} />);

  // Send the HTML response
  res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>React SSR Joke App</title>
      </head>
      <body>
        <div id="root">${appString}</div>
        <script>
          // Pass initial data to the client-side
          window.__INITIAL_JOKE__ = ${JSON.stringify(joke)}
        </script>
        <script src="/bundle.js"></script>
      </body>
    </html>
  `);
});

// Start the server
app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});




// src/App.js
import React, { useState } from 'react';

const App = ({ joke }) => {
  const [currentJoke, setCurrentJoke] = useState(joke);

  const fetchJoke = async () => {
    const response = await fetch('https://official-joke-api.appspot.com/random_joke');
    const newJoke = await response.json();
    setCurrentJoke(newJoke);
  };

  return (
    <div>
      <h1>Random Joke</h1>
      <button onClick={fetchJoke}>Get Another Joke</button>
      <div>
        <p><strong>{currentJoke.setup}</strong></p>
        <p>{currentJoke.punchline}</p>
      </div>
    </div>
  );
};

export default App;



// src/index.js
import React from 'react';
import { hydrate } from 'react-dom';
import App from './App.js';

const data = window.__INITIAL_DATA__;

hydrate(<App data={data} />, document.getElementById('root'));



// webpack.config.js
import path from 'path';

export default {
  entry: './src/index.js',
  output: {
    path: path.resolve('public'),
    filename: 'bundle.js',
  },
  mode: 'development',
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
        },
      },
    ],
  },
};



// babel.config.js
export default {
  presets: [
    [
      '@babel/preset-env',
      {
        modules: false, // Keeps ES6 module syntax
      },
    ],
    '@babel/preset-react',
  ],
};



async function loadContentIntoIframe(url, iframeId = 'content-iframe', targetSelector = '#orchestrator-container') {
  try {
    // Fetch HTML content from the provided URL
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch content from ${url}: ${response.statusText}`);
    }

    const htmlContent = await response.text();

    // Create a new iframe element
    const iframe = document.createElement('iframe');
    iframe.id = iframeId;
    iframe.style.width = '100%';
    iframe.style.height = '100%';
    iframe.style.border = 'none'; // Customize styling as needed

    // Insert the iframe into the target container
    const targetElement = document.querySelector(targetSelector);
    if (!targetElement) {
      throw new Error(`Target container not found for selector: ${targetSelector}`);
    }

    targetElement.appendChild(iframe);

    // Write the fetched HTML content into the iframe
    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
    iframeDoc.open();
    iframeDoc.write(htmlContent);
    iframeDoc.close();
  } catch (error) {
    console.error('Error loading content into iframe:', error);
  }
}

// Example usage
loadContentIntoIframe('https://example.com/page', 'my-iframe', '#orchestrator');


