npm install @babel/core @babel/preset-env @babel/preset-react @babel/register


 // src/App.js
import React, { useState } from 'react';

function App({ posts: initialPosts }) {
  // Use state to manage posts for CSR updates
  const [posts, setPosts] = useState(initialPosts);
  const [loading, setLoading] = useState(false);

  // Function to fetch posts from the API (client-side)
  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts');
      const data = await response.json();
      setPosts(data); // Update state with new posts
    } catch (error) {
      console.error('Error fetching posts:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h1>Welcome to React SSR with API Data!</h1>
      <button onClick={fetchPosts} disabled={loading}>
        {loading ? 'Loading...' : 'Refresh Posts'}
      </button>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>
            <h2>{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;




 // src/server.js
import express from 'express';
import React from 'react';
import { renderToString } from 'react-dom/server'; // Import the server-side rendering function
import App from './App'; // Import the main React component
import fetch from 'node-fetch'; // Import node-fetch for making API requests

// Initialize Express
const app = express();

// Serve static files from the public directory (optional)
app.use(express.static('public'));

// Handle requests to the root URL
app.get('*', async (req, res) => {
  try {
    // Fetch data from the public API
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    const posts = await response.json(); // Convert the response to JSON

    // Render the App component to a string, passing the fetched posts as props
    const appString = renderToString(<App posts={posts} />);

    // Create the full HTML response
    const html = `
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta http-equiv="X-UA-Compatible" content="IE=edge">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>React SSR App</title>
        </head>
        <body>
          <div id="root">${appString}</div>
          <script src="/index.js"></script> <!-- Client-side JavaScript -->
        </body>
      </html>
    `;

    // Send the rendered HTML back to the client
    res.send(html);
  } catch (error) {
    console.error('Error fetching posts:', error);
    res.status(500).send('Error fetching posts');
  }
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});




// src/index.js
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

// Find the root element that was rendered on the server
const container = document.getElementById('root');

// Hydrate the React app into the existing HTML
const root = createRoot(container);
root.render(<App posts={window.__INITIAL_DATA__ || []} />);



npx babel-node src/server.js --presets @babel/preset-env,@babel/preset-react



{
  "name": "react-ssr-app",
  "version": "1.0.0",
  "main": "src/server.js",
  "type": "module",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "node-fetch": "^3.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.16.0",
    "@babel/node": "^7.16.0",
    "@babel/preset-env": "^7.16.0",
    "@babel/preset-react": "^7.16.0"
  }
}

